# -*- coding: utf-8 -*-
"""iris_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JUAHevbMisxlBec-7XmjHbQMUusp5Dc_

1. Write a Python program using Scikit-learn to print the keys, a number of rows-columns, feature names, and the description of the Iris data.
"""

import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt

dataset = pd.read_csv("/content/iris.csv")

"""1.1) Print the keys"""

dataset.keys()

"""1.2) Print the first 10 number of rows-columns"""

dataset.head(n = 10)

"""1.3) Print the last 10 number of rows-columns"""

dataset.tail(n = 10)

"""1.4) Print the Feature Names"""

x = dataset.keys()
x[0:4]

"""1.5) Print the Description of iris data"""

dataset.describe()

"""2. Write a Python program to create a plot to get a general Statistics of Iris data."""

dataset.describe().plot(kind = "area",fontsize=30, figsize = (20,10), table = True,colormap="rainbow")
plt.xlabel('Statistics',)
plt.ylabel('Value')
plt.title("General Statistics of Iris Data")

"""3. Write a Python program to create a graph to find the relationship between the sepal length and width."""

fig=sns.jointplot(x='sepal_length',y='sepal_width',data = dataset)

"""4. Write a Python program using Scikit-learn to split the iris dataset into 70% train data and 30% test data. Out of a total of 150 records, the training set will contain 105 records and the test set contains 45 of those records. Predict the response for test dataset (SepalLengthCm, SepalWidthCm, PetalLengthCm, PetalWidthCm) using 5 different ML Algorithm. Plot the results."""

import sklearn as sk

from sklearn.model_selection import train_test_split

dataset['species'].replace('setosa', 0,inplace=True)
dataset['species'].replace('versicolor', 1,inplace=True)
dataset['species'].replace('virginica', 2,inplace=True)

data_class2 = ['species']
data_class = dataset[data_class2].values
data_features = x[0:4]
data_value = dataset[data_features].values

split_test_size = 0.30

data_train, data_test, label_train, label_test = train_test_split(data_value, data_class, test_size = split_test_size)

print("{0:0.2f}% train data of total 150 records".format((len(data_train)/len(dataset.index)) * 100))
print("{0:0.2f}% test data of total 150 records".format((len(data_test)/len(dataset.index)) * 100))

"""Predict the response for test dataset using 5 different ML Algorithm"""

from sklearn import metrics

from sklearn.metrics import plot_confusion_matrix

"""i) Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier

model_1 = RandomForestClassifier(random_state = 42)
model_1.fit(data_train, label_train.ravel())

predict_train_1 = model_1.predict(data_train)
print("Accuracy on training data = {0:.4f}".format(metrics.accuracy_score(label_train, predict_train_1)))

predict_test_1 = model_1.predict(data_test)
print("Accuracy on test data = {0:.4f}".format(metrics.accuracy_score(label_test, predict_test_1)))

print("Confusion Matrix")
print()
print("{0}".format(metrics.confusion_matrix(label_test, predict_test_1, labels = [0, 1, 2])))
print("\n")
print("Report of Classification")
print()
print(metrics.classification_report(label_test, predict_test_1, labels = [0, 1, 2]))

"""Plot Confusion Matrix"""

plot_confusion_matrix(model_1, data_test, label_test)
plt.show()

"""ii) Gaussian Naive Bayes"""

from sklearn.naive_bayes import GaussianNB

model_2 = GaussianNB()
model_2.fit(data_train, label_train.ravel())

predict_train_2 = model_2.predict(data_train)
print("Accuracy on training data = {0:.4f}".format(metrics.accuracy_score(label_train, predict_train_2)))
print()

predict_test_2 = model_2.predict(data_test)
print("Accuracy on test data = {0:.4f}".format(metrics.accuracy_score(label_test, predict_test_2)))
print()

print("Confusion Matrix")
print()
print("{0}".format(metrics.confusion_matrix(label_test, predict_test_2, labels = [0, 1, 2])))
print('\n')
print("Report of Classification")
print()
print(metrics.classification_report(label_test, predict_test_2, labels = [0, 1, 2]))

"""Plot Confusion Matrix"""

plot_confusion_matrix(model_2, data_test, label_test)
plt.show()

"""iii) Logistic Regression"""

from sklearn.linear_model import LogisticRegression

model_3 = LogisticRegression(C = 0.7, random_state = 42, max_iter = 1000)
model_3.fit(data_train, label_train.ravel())

predict_train_3 = model_3.predict(data_train)
print("Accuracy on training data = {0:.4f}".format(metrics.accuracy_score(label_train, predict_train_3)))
print()

predict_test_3 = model_3.predict(data_test)
print("Accuracy on test data = {0:.4f}".format(metrics.accuracy_score(label_test, predict_test_3)))
print()

print("Confusion Matrix")
print()
print("{0}".format(metrics.confusion_matrix(label_test, predict_test_3, labels = [0, 1, 2])))
print('\n')
print("Report of Classification")
print()
print(metrics.classification_report(label_test, predict_test_3, labels = [0, 1, 2]))

"""Plot Confusion Matrix"""

plot_confusion_matrix(model_3, data_test, label_test)
plt.show()

"""iv) Support Vector Machine(SVM)"""

from sklearn.svm import SVC

model_4 = SVC(kernel='rbf', random_state=0, gamma=.10, C=1.0)
model_4.fit(data_train, label_train)

predict_train_4 = model_4.predict(data_train)
print("Accuracy on training data = {0:.4f}".format(metrics.accuracy_score(label_train, predict_train_4)))
print()

predict_test_4 = model_4.predict(data_test)
print("Accuracy on test data = {0:.4f}".format(metrics.accuracy_score(label_test, predict_test_4)))
print()

print("Confusion Matrix")
print()
print("{0}".format(metrics.confusion_matrix(label_test, predict_test_4, labels = [0, 1, 2])))
print('\n')
print("Report of Classification")
print()
print(metrics.classification_report(label_test, predict_test_4, labels = [0, 1, 2]))

"""Plot Confusion Matrix"""

plot_confusion_matrix(model_4, data_test, label_test)
plt.show()

"""v) Tree"""

from sklearn import tree

model_5 = tree.DecisionTreeClassifier()
model_5.fit(data_train, label_train.ravel())

predict_train_5 = model_5.predict(data_train)
print("Accuracy on training data = {0:.4f}".format(metrics.accuracy_score(label_train, predict_train_5)))
print()

predict_test_5 = model_5.predict(data_test)
print("Accuracy on test data = {0:.4f}".format(metrics.accuracy_score(label_test, predict_test_5)))
print()

print("Confusion Matrix")
print()
print("{0}".format(metrics.confusion_matrix(label_test, predict_test_5, labels = [0, 1, 2])))
print('\n')
print("Report of Classification")
print()
print(metrics.classification_report(label_test, predict_test_5, labels = [0, 1, 2]))

"""Plot Confusion Matrix"""

plot_confusion_matrix(model_5, data_test, label_test)
plt.show()

"""Plot the Tree"""

tree.plot_tree(model_5)